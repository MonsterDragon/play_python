1、问题：需要确保所有的字符串都拥有相同的底层表示
2、方法
python的字符串是unicode
>>> s1 = 'Spicy Japlape\u00f1o'
>>> s2 = 'Spicy Japlapen\u0303o'
>>> s1
'Spicy Japlapeño'
>>> s2
'Spicy Japlapeño'
>>> s1 == s2
False
>>> len(s1)
15
>>> len(s2)
16
对于一个娇娇字符串的程序来说，同一个文本拥有多种不同表示形式是个大问题，为了解决这个问题，应该先将文本统一表示为规范形式，这可以通过unicodedata模块来完成
>>> import unicodedata
>>> t1 = unicodedata.normalize('NFC', s1)
>>> t2 = unicodedata.normalize('NFC', s2)
>>> t1 == t2
True
>>> print(ascii(t1))
'Spicy Japlape\xf1o'
>>> t3 = unicodedata.normalize('NFD', s1)
>>> t4 = unicodedata.normalize('NFD', s2)
>>> t3 == t4
True
>>> print(ascii(t3))
'Spicy Japlapen\u0303o'
normalize()的第一个参数指定了字符串应该如何完成规范表示。NFC表示字符应该是全组成的。NFD表示应该使用组合字符，每个字符应该是能完全分解开的
python还支持NFkC和NFKD的规范表示形式，它们为处理特定类型的字符增加了额外兼容的功能
对于任何需要确保以规范和一致性的方式处理Unicode文本的程序来说，规范化都是重要的一部分。尤其是在处理用户输入时接收到的字符串时
