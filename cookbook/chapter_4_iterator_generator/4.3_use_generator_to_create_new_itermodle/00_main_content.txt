1、问题：我们想实现一个自定义的迭代模式，使其区别于常见的内建函数（range()/resversed()）
2、方法：生成器
>>> def frange(start, stop, increment):
...     x = start
...     while x<stop:
...         yield x
...         x += increment
... 
>>> for i in frange(0, 4, 0.5):
...     print(i)
... 
0
0.5
1.0
1.5
2.0
2.5
3.0
3.5
3、讨论
函数中只要出现了yield语句就会将其转变成一个生成器。与普通函数不同，生成器只会在响应迭代操作时才运行
>>> def countdown(n):
...     print('Starting to count from', n)
...     while n > 0:
...         yield n
...         n -= 1
...     print("Done")
... 
>>> countdown(3)
<generator object countdown at 0x7fc99e7c9bf8>
>>> c = countdown(3)
>>> c
<generator object countdown at 0x7fc99e7c9c50>
>>> next(c)
Starting to count from 3
3
>>> next(c)
2
>>> next(c)
1
>>> next(c)
Done
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
StopIteration
生成器函数只会在响应迭代过程中的"next"操作时才会运行
