1、问题：我么有一个字节串，需要将其解包为一个整型数值。此外，还需要将一个大整数重新转换为一个字节串
2、方法：
将字节解释为整数，可以使用int.from_bytes()
>>> data = b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004'
>>> len(data)
16
>>> int.from_bytes(data, 'little')
69120565665751139577663547927094891008
>>> int.from_bytes(data, 'big')
94522842520747284487117727783387188
讲一个大整数重新转换为字节串，可以使用int.to_bytes()方法，只要制定字节数和字节序即可
>>> x = 9452284252047284487117727783387188
>>> x.to_bytes(16, 'big')
b'\x00\x01\xd2\x08\x99\xa5\xa2A\\4p\x0e\x86\xa3\x004'
>>> x.to_bytes(16, 'little')
b'4\x00\xa3\x86\x0ep4\\A\xa2\xa5\x99\x08\xd2\x01\x00'
3、讨论
在大整数和字节串之间互相转换并不算是常见操作。但在加密技术和网络应用中却可有用。比如IPv6网络地址就是一个由128位的整数表示的
作为替代方案，可以使用struct模块完成解包。但是struct模块可解报的整数大小是有限制的。因此，需要解包多个值，然后再将它们合并起来以得到最终的结果
>>> import struct
>>> hi, lo = struct.unpack('>QQ', data)
>>> (hi << 64) + lo
94522842520747284487117727783387188
字节序的规范（大端或小端）指定了组成整数的字节是从低位到高位排列还是从高位到低位排列
>>> x = 0x01020304
>>> x.to_bytes(4, 'little')
b'\x04\x03\x02\x01'
>>> x.to_bytes(4, 'big')
b'\x01\x02\x03\x04'
如果尝试讲一个整数打包成字节串，单字节大小不合适的话得到一个错误信息。如果需要的话，可以使用int.bit_length()方法来确定需要用到多少位才能保存这个值
>>> x = 523 ** 23
>>> x
335381300113661875107536852714019056160355655333978849017944067
>>> x.to_bytes(16, 'big')
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
OverflowError: int too big to convert
>>> x.bit_length()
208
>>> x.to_bytes(208, 'big')
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xb5R\xd9\xc8\xa2\x98\xd1\x91\xec\xee\x18\xcf\xb9\xf3\x16c\xc7\xac\x96Ti\x82\xf1X\x03'
>>> nbytes, rem = divmod(x.bit_length(), 8)
>>> if rem:
...     nbytes += 1
... 
>>> nbytes
26
>>> nbytes, rem = divmod(x.bit_length(), 8)
>>> nbytes
26
>>> x.to_bytes(nbytes, 'big')
b'\xd0\xb5R\xd9\xc8\xa2\x98\xd1\x91\xec\xee\x18\xcf\xb9\xf3\x16c\xc7\xac\x96Ti\x82\xf1X\x03'

