1、问题：我们需要对小鼠进行精确计算，不希望因为浮点数天生的误差而带来影响
2、方法：decimal模块
>>> from decimal import Decimal
>>> a = Decimal('4.2')
>>> b = Decimal('2.1')
>>> a + b
Decimal('6.3')
>>> print(a+b)
6.3
>>> (a+b) == Decimal('6.3')
True
decimal模块的主要功能是允许控制计算过程中的各个方面，这包括数字的位数和四舍五入。要做到这些，需要创建一个本地的上下文环境然后修改其设定
>>> from decimal import localcontext
>>> a = Decimal('1.3')
>>> b = Decimal('1.7')
>>> print(a/b)
0.7647058823529411764705882353
>>> with localcontext() as ctx:
...     ctx.prec = 3
...     print(a/b)
... 
0.765
>>> print(a/b)
0.7647058823529411764705882353
>>> with localcontext() as ctx:
...     ctx.prec = 50
...     print(a/b)
... 
0.76470588235294117647058823529411764705882352941176
讨论：更常见的做法是使用普通浮点型。首先，在真实世界中极少有什么东西需要计算到小数点后17位。因此在计算中引入微笑的误差根本就是不足挂齿，其次，原生浮点数运算性能要快很多
