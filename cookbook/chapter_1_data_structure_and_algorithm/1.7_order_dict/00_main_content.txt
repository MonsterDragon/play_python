问题：你想创建一个字典，并且在迭代或序列化这个字典的时候能够控制元素的顺序
解决方案：
使用collections模块中的OrderedDict
>>> from collections import OrderedDict
>>> d = OrderedDict()
>>> d['foo'] = 1
>>> d['bar'] = 2
>>> d['spam'] = 3
>>> d['grok'] = 4
>>> d
OrderedDict([('foo', 1), ('bar', 2), ('spam', 3), ('grok', 4)])
>>> for key in d:
...     print(key, d[key])
... 
foo 1
bar 2
spam 3
grok 4
>>> type(d)
<class 'collections.OrderedDict'>
>>> dir(d)
['__class__', '__contains__', '__delattr__', '__delitem__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'move_to_end', 'pop', 'popitem', 'setdefault', 'update', 'values']
>>> d.keys()
odict_keys(['foo', 'bar', 'spam', 'grok'])
OrderedDict 内部维护着一个根据键插入顺序排序的双向链表。每次当一个新的
元素插入进来的时候，它会被放到链表的尾部。对于一个已经存在的键的重复赋值不会
改变键的顺序。
需要注意的是，一个 OrderedDict 的大小是一个普通字典的两倍，因为它内部维
护着另外一个链表。所以如果你要构建一个需要大量 OrderedDict 实例的数据结构的
时候（比如读取 100,000 行 CSV 数据到一个 OrderedDict 列表中去），那么你就得仔
细权衡一下是否使用 OrderedDict 带来的好处要大过额外内存消耗的影响。
