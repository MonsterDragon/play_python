module heapq

heapq堆排序，这个模块提供了堆队列算法的实现，也称为优先队列算法
要创建一个堆，可以使用list来初始化为 [] ，或者你可以通过一个函数 heapify() ，来把一个list转换成堆

heapq.heapify(x)
	将list x 转换成堆，原地，线性时间内
heapq.heappush(heap, item)
	将 item 的值加入 heap 中，保持堆的不变性
heapq.heappop(heap)
	弹出并返回 heap 的最小的元素，保持堆的不变性。如果堆为空，抛出 IndexError 。使用 heap[0] ，可以只访问最小的元素而不弹出它
heapq.heappushpop(heap, item)
	将 item 放入堆中，然后弹出并返回 heap 的最小元素。该组合操作比先调用  heappush() 再调用 heappop() 运行起来更有效率
heapq.heapreplace(heap, item)
	弹出并返回 heap 中最小的一项，同时推入新的 item。 堆的大小不变。 如果堆为空则引发 IndexError
nlargest(n, iterable, key=None)
	从 iterable 所定义的数据集中返回前 n 个最大元素组成的列表。 如果提供了 key 则其应指定一个单参数的函数，用于从 iterable 的每个元素中提取比较键 (例如 key=str.lower)。 等价于: sorted(iterable, key=key, reverse=True)[:n]。
nsmallest(n, iterable, key=None)
	从 iterable 所定义的数据集中返回前 n 个最小元素组成的列表。 如果提供了 key 则其应指定一个单参数的函数，用于从 iterable 的每个元素中提取比较键 (例如 key=str.lower)。 等价于: sorted(iterable, key=key)[:n]
