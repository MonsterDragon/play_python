对任何子类，它是一个包含其父类的集合的元组
>>> class A(object):
...     pass
... 
>>> class B(A):
...     pass
... 
>>> class C(B):
...     pass
... 
>>> class D(A, B):
...     pass
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Cannot create a consistent method resolution
order (MRO) for bases A, B
>>> class D(object):
...     pass
... class E(A, D):
  File "<stdin>", line 3
    class E(A, D):
        ^
SyntaxError: invalid syntax
>>> class D(object):
...     pass
... 
>>> class E(A, D):
...     pass
... 
>>> A.__bases__
(<class 'object'>,)
>>> B.__bases__
(<class '__main__.A'>,)
>>> C.__bases__
(<class '__main__.B'>,)
>>> D.__bases__
(<class 'object'>,)
>>> E.__bases__
(<class '__main__.A'>, <class '__main__.D'>)
