>>> class P1(object):
...     def foo(self):
...         print("called P1-foo()")
... 
>>> class P2(object):
...     def foo(self):
...         print("called P2-foo()")
...     def bar(self):
...         print("called P2-bar()")
... 
>>> class C1(P1, P2):
...     pass
... 
>>> class C2(P1, P2):
...     def bar(self):
...         print("called C2-bar()")
... 
>>> class GC(C1, C2):
...     pass
... 
>>> ga = GC()
>>> ga.foo()
called P1-foo()
>>> ga.bar()
called C2-bar()
>>> GC.__mro__
(<class '__main__.GC'>, <class '__main__.C1'>, <class '__main__.C2'>, <class '__main__.P1'>, <class '__main__.P2'>, <class 'object'>)
与沿着继承树一步一步上溯不同，他首先查找同胞兄弟，采用一种广度优先的方式。当查找foo()，它检查GC，然后是C1和C2，然后在P1中找到。如果P1中没有，查找将会到达P2
